import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.markdown import hbold

API_TOKEN = '7994840465:AAFKcaG62VZQzUZ7n0FYOR4YqHEK2cJnjr0'
ADMIN_ID = 947000812

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

user_messages = {}
active_users = set()
last_bot_message = {}
last_bot_gif_message = {}
last_warning_message = {}
admin_reply_context = {}

start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–æ—Å–ª–∞—Ç—å –≤–µ—Å—Ç—å", callback_data="send_message")]
])

send_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="final_send")]
])

cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="go_back")]
])

back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="go_back")]
])


def admin_notification_keyboard(user_id: int):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_{user_id}")]
    ])


async def send_welcome_message(chat_id: int):
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë ID
    gif = await bot.send_animation(chat_id, animation="https://media1.tenor.com/m/T0K86nFmVfQAAAAC/welcome-youre-welcome.gif")
    last_bot_gif_message[chat_id] = gif.message_id

    text = (
        "–ò–Ω–æ–≥–¥–∞ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞—Ö–æ–¥—è—Ç –ø—É—Ç—å –∫ –∞–¥—Ä–µ—Å–∞—Ç—É –Ω–µ —Å—Ä–∞–∑—É, –∞ —á–µ—Ä–µ–∑ –≤–µ—Ä–Ω—ã—Ö –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤. "
        "–í—ã —Å–µ–π—á–∞—Å –±–µ—Å–µ–¥—É–µ—Ç–µ —Å —Ç–∞–∫–∏–º ‚Äî –º–æ–∏–º –ª–∏—á–Ω—ã–º –±–æ—Ç–æ–º.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –Ø –ø—Ä–æ—á—Ç—É, –æ—Ç–∫–ª–∏–∫–Ω—É—Å—å, "
        "–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Å–æ–µ–¥–∏–Ω—é –≤–∞—Å —Å —Å–æ–±–æ–π –Ω–∞–ø—Ä—è–º—É—é."
    )
    sent = await bot.send_message(chat_id, text, reply_markup=start_keyboard)
    last_bot_message[chat_id] = sent.message_id


@dp.message()
async def handle_any_message(message: types.Message):
    user_id = message.from_user.id

    if user_id == ADMIN_ID and user_id in admin_reply_context:
        admin_reply_context[user_id]['messages'].append(message)
        return

    if user_id not in active_users:
        active_users.add(user_id)
        await send_welcome_message(user_id)
        return

    if user_id in user_messages:
        user_messages[user_id].append(message)

        if user_id in last_warning_message:
            try:
                await bot.delete_message(chat_id=user_id, message_id=last_warning_message[user_id])
            except:
                pass
            del last_warning_message[user_id]


@dp.callback_query(F.data == "send_message")
async def send_message_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_messages[user_id] = []

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–∏—Ñ–∫–∏
    if user_id in last_bot_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_message[user_id])
        except:
            pass

    if user_id in last_bot_gif_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_gif_message[user_id])
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
    gif = await callback.message.answer_animation("https://media1.tenor.com/m/ulcWD1uF7vMAAAAC/anime-keyboard.gif")
    last_bot_gif_message[user_id] = gif.message_id

    sent = await callback.message.answer(
        "–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–Ω–∏ –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–π–¥—É—Ç –¥–æ –º–µ–Ω—è!!\n\n"
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.",
        reply_markup=send_keyboard
    )
    last_bot_message[user_id] = sent.message_id


@dp.callback_query(F.data == "final_send")
async def final_send_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    msgs = user_messages.get(user_id)

    if user_id in last_warning_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_warning_message[user_id])
        except:
            pass
        del last_warning_message[user_id]

    if not msgs or len(msgs) == 0:
        warning = await callback.message.answer(
            "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–æ.",
            reply_markup=cancel_keyboard
        )
        last_warning_message[user_id] = warning.message_id
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–∏—Ñ–∫–∏
    if user_id in last_bot_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_message[user_id])
        except:
            pass

    if user_id in last_bot_gif_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_gif_message[user_id])
        except:
            pass

    username = f"@{callback.from_user.username}" if callback.from_user.username else "(–Ω–µ—Ç username)"
    header = (
        f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{hbold(callback.from_user.full_name)}</b>\n"
        f"üîπ Username: {username}\n"
        f"üîπ ID: <code>{user_id}</code>\n\n"
    )

    await bot.send_message(ADMIN_ID, header, reply_markup=admin_notification_keyboard(user_id))
    for msg in msgs:
        try:
            await msg.copy_to(ADMIN_ID)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")

    user_messages[user_id] = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã..."
    gif = await bot.send_animation(
        user_id,
        animation="https://media1.tenor.com/m/KxCdhyI1Dl4AAAAC/baby-cute.gif"
    )
    last_bot_gif_message[user_id] = gif.message_id

    sent = await bot.send_message(
        user_id,
        "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã.\n"
        "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —É –º–µ–Ω—è –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ‚Äî —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø—Ä–æ—á—Ç—É –∏ –æ—Ç–≤–µ—á—É –í–∞–º.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ —É–±–µ–¥–∏–≤—à–∏—Å—å –≤ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–¥–µ–ª–∞–ª–∏ —Ç–µ –∂–µ —Å–∞–º—ã–µ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏, —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥. "
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        reply_markup=back_keyboard
    )
    last_bot_message[user_id] = sent.message_id


@dp.callback_query(F.data.startswith("reply_to_"))
async def admin_reply_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–≤–µ—á–∞—Ç—å.")
        return

    target_user_id = int(callback.data.split("_")[-1])
    admin_reply_context[user_id] = {
        'user_id': target_user_id,
        'messages': []
    }

    await callback.message.answer(
        f"–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID <b>{target_user_id}</b>.\n"
        "–ü–∏—à–∏—Ç–µ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="admin_final_send")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="admin_cancel_reply")]
        ])
    )
    await callback.answer()


@dp.callback_query(F.data == "admin_final_send")
async def admin_final_send_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id != ADMIN_ID or user_id not in admin_reply_context:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    context = admin_reply_context[user_id]
    target_user_id = context['user_id']
    messages_to_send = context['messages']

    if not messages_to_send:
        await callback.message.answer("–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    for msg in messages_to_send:
        try:
            await msg.copy_to(target_user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    await callback.message.answer("–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=back_keyboard)
    del admin_reply_context[user_id]


@dp.callback_query(F.data == "admin_cancel_reply")
async def admin_cancel_reply_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id == ADMIN_ID and user_id in admin_reply_context:
        del admin_reply_context[user_id]

    await callback.message.answer("–û—Ç–≤–µ—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=back_keyboard)


@dp.callback_query(F.data == "go_back")
async def go_back_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in last_warning_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_warning_message[user_id])
        except:
            pass
        del last_warning_message[user_id]

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_id in last_bot_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_message[user_id])
        except:
            pass

    # –£–¥–∞–ª—è–µ–º –≥–∏—Ñ–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –±–æ—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if user_id in last_bot_gif_message:
        try:
            await bot.delete_message(chat_id=user_id, message_id=last_bot_gif_message[user_id])
        except:
            pass

    # –ù–ï —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await send_welcome_message(user_id)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
